@using ILIS.Football.Assignment.Helpers
@using ILIS.Football.Assignment.Models.ViewModels
@model CompetitionResponse[];

@{
    ViewData["Title"] = "Football Matches - NATIVE STATS";
}

<slide-toggle></slide-toggle>
<p class="disclaimer">* Odds are mock data randomly generated.</p>

<div id="competitions-container">
    @foreach (var competition in Model)
    {
        <h2 class="competition-title">@competition.Competition.Name</h2>
        <competition-block competition-id="@competition.Competition.Id"
                           competition-emblem="@competition.Competition.Emblem"
                           matches='@JsonHelper.SerializeCamelCase(competition.Matches)'>
        </competition-block>
    }
</div>


<script>
    document.addEventListener("DOMContentLoaded", () => {
        const toggle = document.querySelector("slide-toggle");
        const container = document.getElementById("competitions-container");
        let currentToggleState = null;

        toggle.addEventListener("toggle-change", (event) => {
            const isRecent = event.detail;

            if (currentToggleState !== isRecent) {
                currentToggleState = isRecent; 
                const competitionBlocks = container.querySelectorAll("competition-block");
                competitionBlocks.forEach(block => {
                    block.setAttribute("is-recent", isRecent);
                });
            }
        });
    });
</script>


<script src="~/js/slide-toggle.js" defer></script>
<script src="~/js/competition-block.js" defer></script>
<script src="~/js/match-card.js" defer></script>
<script src="~/js/competition-lazy-loading.js" defer></script>
